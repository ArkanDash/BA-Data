name: JP Update

on:
  schedule:
    # Run every Wednesday at 03:00, 05:00, 07:00, 09:00 UTC
    - cron: '0 3 * * 3'
    - cron: '0 5 * * 3'
    - cron: '0 7 * * 3'
    - cron: '0 9 * * 3'
    # Run everyday at 07:00 UTC
    - cron: '0 7 * * *'
  workflow_dispatch: # Allows manual triggering of the workflow

permissions:
  contents: write # Grants write permissions to the workflow for committing and pushing

jobs:
  update-game-url:
    environment: "GitHub Action" # Specifies the environment for secrets/variables
    runs-on: ubuntu-latest # The operating system for the job

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper submodule handling
          submodules: true # Initialize and update submodules

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Use any Python 3.x version

      - name: Install Dependencies
        run: |
          # Install Python dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping dependency installation."
          fi

      - name: Run getApkData.py
        run: python getApkData.py # Execute the script to get APK data

      - name: Set executable permissions for dumpers
        run: |
          # Ensure dumper tools are executable
          chmod +x ./dump_lib/Il2CppDumper/Il2CppDumper
          chmod +x ./dump_lib/FbsDumper/FbsDumper

      - name: Run getJPVersion.py
        run: python getJPVersion.py # Execute the script to get JP version data

      - name: Configure Git user
        run: |
          # Configure Git user for commits made by the action
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Check for changes in submodule
        id: check_submodule_diff # ID for referencing outputs from this step
        run: |
          # Stage any changes within the 'moexcom_data' submodule
          git -C moexcom_data add .
          
          # Check if there are any staged changes in the submodule
          if git -C moexcom_data diff --cached --quiet; then
              echo "No changes detected within moexcom_data submodule."
              echo "submodule_changed=false" >> $GITHUB_OUTPUT # Set output for no changes
          else
              echo "Changes detected within moexcom_data submodule. Committing these changes."
              echo "submodule_changed=true" >> $GITHUB_OUTPUT # Set output for changes
          fi

      - name: Extract Submodule Config Info
        id: extract_config # ID for referencing outputs from this step
        if: steps.check_submodule_diff.outputs.submodule_changed == 'true'
        run: |
          # Parse config.json from the submodule and set as outputs
          RAW_GAME_URL=$(jq -r '.ServerInfoDataUrl' moexcom_data/jp_data/config.json)
          RAW_CATALOG_URL=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].AddressablesCatalogUrlRoot' moexcom_data/jp_data/config.json)
          CATALOG_VERSION=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].Name' moexcom_data/jp_data/config.json)

          GAME_URL_BASENAME=$(echo "$RAW_GAME_URL" | sed -n 's#.*/\([^/]*\)\.json#\1#p')
          CATALOG_ID=$(echo "$RAW_CATALOG_URL" | sed -n 's#.*/\([^/]*\)$#\1#p')

          echo "game_url_basename=$GAME_URL_BASENAME" >> $GITHUB_OUTPUT
          echo "catalog_id=$CATALOG_ID" >> $GITHUB_OUTPUT
          echo "catalog_version=$CATALOG_VERSION" >> $GITHUB_OUTPUT
          echo "raw_game_url=$RAW_GAME_URL" >> $GITHUB_OUTPUT
          echo "raw_catalog_url=$RAW_CATALOG_URL" >> $GITHUB_OUTPUT


      - name: Commit and Push Submodule Changes
        if: steps.check_submodule_diff.outputs.submodule_changed == 'true'
        run: |
          # Navigate into the submodule directory
          cd moexcom_data

          # Set up the remote URL for the submodule to include the token for authentication
          # Replace 'ArkanDash' with the actual owner of your MoeXComDataDump repository if different.
          git remote set-url origin "https://ArkanDash:${{ secrets.SUBMODULE_TOKEN }}@github.com/ArkanDash/MoeXComDataDump.git"

          # Use extracted outputs for the commit message
          SUBMODULE_COMMIT_MSG="${{ steps.extract_config.outputs.game_url_basename }}_${{ steps.extract_config.outputs.catalog_id }}"
          echo "Submodule Commit message: $SUBMODULE_COMMIT_MSG"

          # Commit staged changes within the submodule
          git commit -m "$SUBMODULE_COMMIT_MSG"

          # Push committed changes to the submodule's remote repository
          git push origin main
          echo "Submodule changes pushed successfully."

      - name: Update Main Repository Reference
        if: steps.check_submodule_diff.outputs.submodule_changed == 'true'
        run: |
          # Navigate back to the main repository root (current working directory is already main repo root for this step)
          # Add the submodule directory to stage its updated commit reference
          git add moexcom_data

          # Define the commit message for the main repository
          MAIN_REPO_COMMIT_MSG="Update MoeXComDataDump submodule for JP"
          echo "Main Repository Commit message: $MAIN_REPO_COMMIT_MSG"

          # Commit the updated submodule reference in the main repository
          git commit -m "$MAIN_REPO_COMMIT_MSG"

          # Push the commit to the main branch of this repository
          git push origin HEAD:main
          echo "Main repository submodule reference pushed successfully."

      - name: Send update to Discord
        if: steps.check_submodule_diff.outputs.submodule_changed == 'true'
        run: |
          # Get the latest commit hash of the *main* repository that includes the submodule update
          commit_hash=$(git rev-parse HEAD)
          commit_url="https://github.com/${GITHUB_REPOSITORY}/commit/${commit_hash}"

          # Construct raw data links (will point to the main repo's commit with submodule data)
          dump_data_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/moexcom_data/jp_data/dump.cs"
          fbs_data_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/moexcom_data/jp_data/BlueArchive.fbs"
          config_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/moexcom_data/jp_data/config.json"

          # Use outputs from the 'extract_config' step
          embed_description=$(cat <<EOF
          **Game Info**
          Server Info Data Url: [${{ steps.extract_config.outputs.game_url_basename }}](${{ steps.extract_config.outputs.raw_game_url }})
          Catalog Version: ${{ steps.extract_config.outputs.catalog_version }}
          Catalog Url: ${{ steps.extract_config.outputs.catalog_id }}

          **Game Data**
          Dump Data: [dump.cs](${dump_data_link})
          FBS Data: [BlueArchive.fbs](${fbs_data_link})
          Config Data: [config.json](${config_link})
          EOF
          )

          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          payload=$(jq -n \
            --arg title "JP Config Update" \
            --arg description "$embed_description" \
            --arg url "$commit_url" \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "url": $url,
                  "color": 255,
                  "timestamp": $timestamp
                }
              ]
            }')

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$payload" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
          echo "Discord notification sent."
