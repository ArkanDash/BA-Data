name: Global Update

on:
  schedule:
    # Run every Tuesday at 03:00, 05:00, 07:00, 09:00 UTC
    - cron: '0 3 * * 2'
    - cron: '0 5 * * 2'
    - cron: '0 7 * * 2'
    - cron: '0 9 * * 2'
    # Run everyday at 07:00
    - cron: '0 7 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-game-url:
    environment: "GitHub Action"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping dependency installation."
          fi

      - name: Run getApkData.py
        run: python getApkData.py --region global

      - name: Set executable permissions for dumpers
        run: |
          chmod +x ./dump_lib/Il2CppDumper/Il2CppDumper
          chmod +x ./dump_lib/FbsDumper/FbsDumper

      - name: Run getGlobalVersion.py
        run: python getGlobalVersion.py

      - name: Configure Git user
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Check for changes in submodule
        id: check_submodule_diff
        run: |
          # Check for changes within the submodule itself
          # First, ensure the submodule is updated to whatever the script dumped
          git -C moexcom_data add .
          
          # Check if there are any staged changes (new or modified files) in the submodule
          if git -C moexcom_data diff --cached --quiet; then
              echo "No changes detected within moexcom_data submodule."
              echo "submodule_changed=false" >> $GITHUB_OUTPUT
          else
              echo "Changes detected within moexcom_data submodule. Committing these changes."
              echo "submodule_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Submodule Changes
        if: steps.check_submodule_diff.outputs.submodule_changed == 'true'
        run: |
          # Navigate into the submodule directory
          cd moexcom_data

          # Get commit message parts from the newly generated config.json inside the submodule
          # Note: The path here is relative to the submodule's root.
          raw_game_url=$(jq -r '.ServerInfoDataUrl' global_data/config.json)
          raw_catalog=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].AddressablesCatalogUrlRoot' global_data/config.json)

          game_version=$(jq -r '.latest_build_version' global_data/config.json)
          resource_path=$(jq -r '.patch.resource_path' global_data/config.json)
          catalog_id=$(echo "$resource_path" | sed -n 's#.*/com\.nexon\.bluearchive/\([^/]*\)/.*#\1#p')
          catalog_version=$(jq -r '.patch_version' global_data/resources.json)

          commit_msg="${game_version}_${catalog_version}_${catalog_id}"
          echo "Submodule Commit message: $commit_msg"

          # Commit changes within the submodule
          # We already added all changes with `git -C moexcom_data add .` in the previous step
          git commit -m "$commit_msg"

          # Push changes to the submodule's remote repository
          git push "https://x-access-token:${{ secrets.SUBMODULE_TOKEN }}@github.com/ArkanDash/MoeXComDataDump.git" HEAD:main
          echo "Submodule changes pushed successfully."

      - name: Update Main Repository Reference
        if: steps.check_submodule_diff.outputs.submodule_changed == 'true'
        run: |
          # Navigate back to the main repository root
          # The previous step's `cd moexcom_data` will be reset on a new run step.
          # So we just need to add and commit the submodule reference from the main repo root.
          git add moexcom_data # Add the submodule directory (which updates its commit reference)

          # Get commit message parts from the newly generated config.json inside the submodule
          # Path here is relative to the main repo's root for the submodule's content.
          raw_game_url=$(jq -r '.ServerInfoDataUrl' moexcom_data/global_data/config.json)
          raw_catalog=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].AddressablesCatalogUrlRoot' moexcom_data/global_data/config.json)

          game_version=$(jq -r '.latest_build_version' moexcom_data/global_data/config.json)
          resource_path=$(jq -r '.patch.resource_path' moexcom_data/global_data/config.json)
          catalog_id=$(echo "$resource_path" | sed -n 's#.*/com\.nexon\.bluearchive/\([^/]*\)/.*#\1#p')
          catalog_version=$(jq -r '.patch_version' moexcom_data/global_data/resources.json)

          commit_msg="Update MoeXComDataDump submodule for Global"
          echo "Main Repository Commit message: $commit_msg"

          # Commit the updated submodule reference in the main repository
          git commit -m "$commit_msg"

          # Push the commit to the main branch of this repository
          git push origin HEAD:main
          echo "Main repository submodule reference pushed successfully."

      - name: Send update to Discord
        if: steps.check_submodule_diff.outputs.submodule_changed == 'true'
        run: |
          # Get the latest commit hash of the *main* repository that includes the submodule update
          commit_hash=$(git rev-parse HEAD)
          commit_url="https://github.com/${GITHUB_REPOSITORY}/commit/${commit_hash}"

          # IMPORTANT: Update these links to point to the submodule content
          dump_data_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/moexcom_data/global_data/dump.cs"
          fbs_data_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/moexcom_data/global_data/BlueArchive.fbs"
          config_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/moexcom_data/global_data/config.json"
          resources_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/moexcom_data/global_data/resources.json"

          # Retrieve data from the config.json located inside the submodule
          game_version=$(jq -r '.latest_build_version' moexcom_data/global_data/config.json)
          resource_path=$(jq -r '.patch.resource_path' moexcom_data/global_data/config.json)
          catalog_id=$(echo "$resource_path" | sed -n 's#.*/com\.nexon\.bluearchive/\([^/]*\)/.*#\1#p')
          catalog_version=$(jq -r '.patch_version' moexcom_data/global_data/resources.json)

          embed_description=$(cat <<EOF
          **Game Info**
          Game Version: ${game_version}
          Resource Data: [${catalog_id}](${resource_path})
          Resource Version: ${catalog_version}
          Resource Id: ${catalog_id}

          **Game Data**
          Dump Data: [dump.cs](${dump_data_link})
          FBS Data: [BlueArchive.fbs](${fbs_data_link})
          Config Data: [config.json](${config_link})
          Resources Data: [resources.json](${resources_link})
          EOF
          )

          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          payload=$(jq -n \
            --arg title "Global Config Update" \
            --arg description "$embed_description" \
            --arg url "$commit_url" \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "url": $url,
                  "color": 5793266,
                  "timestamp": $timestamp
                }
              ]
            }')

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$payload" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
          echo "Discord notification sent."