name: Update Game URL

on:
  schedule:
    - cron: '0 3 * * 4'
    - cron: '0 5 * * 4'
    - cron: '0 7 * * 4'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-game-url:
    environment: "GitHub Action"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping dependency installation."
          fi

      - name: Run getApkData.py
        run: python getApkData.py

      - name: Set executable permissions for Il2CppDumper
        run: chmod +x ./extracted/Il2CppDumper/Il2CppDumper

      - name: Run getJPVersion.py
        run: python getJPVersion.py

      - name: Check if config.json changed
        id: check_diff
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          if git ls-tree -r origin/main --name-only | grep -q "^data/config.json$"; then
            echo "config.json exists on main branch."
            if git diff origin/main -- data/config.json --quiet; then
              echo "No changes in config.json, exiting."
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              echo "Changes detected in data/config.json."
              echo "changed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "config.json does not exist on main branch, treating as change."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Config Update
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          # Get raw URLs from data/config.json
          raw_game_url=$(jq -r '.ServerInfoDataUrl' data/config.json)
          raw_catalog=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].AddressablesCatalogUrlRoot' data/config.json)
          
          # Extract the desired portions:
          # For the game URL, capture the part between the last "/" and ".json"
          game_url=$(echo "$raw_game_url" | sed -n 's#.*/\([^/]*\)\.json#\1#p')
          # For the catalog URL, capture the part after the last "/"
          catalog=$(echo "$raw_catalog" | sed -n 's#.*/\([^/]*\)$#\1#p')
          
          # Construct commit message in the format: {game_url}_{catalog}
          commit_msg="${game_url}_${catalog}"
          
          # Commit the updated data/config.json
          git add data/config.json
          git add data/dump.cs
          git add data/BlueArchive.fbs
          git commit -m "$commit_msg"
          
          # Push the commit to main
          git push origin HEAD:main

      - name: Send update to Discord
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          # Capture the current commit hash
          commit_hash=$(git rev-parse HEAD)

          # Use commit hash for raw file links to point to the current commit's data
          dump_data_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/data/dump.cs"
          fbs_data_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/data/BlueArchive.fbs"
          config_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/data/config.json"

          # Parse config values from data/config.json
          raw_game_url=$(jq -r '.ServerInfoDataUrl' data/config.json)
          game_url=$(echo "$raw_game_url" | sed -n 's#.*/\([^/]*\)\.json#\1#p')

          catalog_version=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].Name' data/config.json)
          raw_catalog=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].AddressablesCatalogUrlRoot' data/config.json)
          catalog=$(echo "$raw_catalog" | sed -n 's#.*/\([^/]*\)$#\1#p')

          # Build embed description with actual newline characters using a heredoc
          embed_description=$(cat <<EOF
          **ServerInfoDataUrl:** ${game_url}
          **AddressablesCatalogUrlVersion:** ${catalog_version}
          **AddressablesCatalogUrlRoot:** ${catalog}
          **DumpData:** [dump.cs](${dump_data_link})
          **FBSData:** [BlueArchive.fbs](${fbs_data_link})
          **FullConfigData:** [config.json](${config_link})
          EOF
          )

          # Get current UTC timestamp in ISO 8601 format
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Create JSON payload for Discord embed
          payload=$(jq -n \
            --arg title "Config Update" \
            --arg description "$embed_description" \
            --arg timestamp "$timestamp" \
            '{
              embeds: [
                {
                  title: $title,
                  description: $description,
                  color: 255,
                  timestamp: $timestamp
                }
              ]
            }')
            
          # Send the payload to Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$payload" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
        