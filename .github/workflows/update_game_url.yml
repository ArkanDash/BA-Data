name: Update Game URL

# Run every Thursday at 05:00 and 07:00 UTC
on:
  schedule:
    - cron: '0 5 * * 4'
    - cron: '0 7 * * 4'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-game-url:
    environment: "GitHub Action"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping dependency installation."
          fi

      - name: Run getApkData.py
        run: python getApkData.py

      - name: Set executable permissions for Il2CppDumper
        run: chmod +x ./extracted/Il2CppDumper/Il2CppDumper

      - name: Run getJPVersion.py
        run: python getJPVersion.py

      - name: Extract commit message from config.json
        id: extract
        run: |
          # Use jq to extract the ServerInfoDataUrl from config.json
          url=$(jq -r '.ServerInfoDataUrl' config.json)
          echo "URL: $url"
          # Extract the commit message from the URL (string between the last "/" and ".json")
          commit_msg=$(echo "$url" | sed -n 's#.*/\([^/]*\)\.json#\1#p')
          echo "Commit message: $commit_msg"
          echo "commit_msg=$commit_msg" >> $GITHUB_OUTPUT

      - name: Check if config.json changed
        id: check_diff
        run: |
          # Configure git so that commit actions work
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          # Check if config.json exists on the main branch
          if git ls-tree -r origin/main --name-only | grep -q "^config.json$"; then
            echo "config.json exists on main branch."
            # Compare the current config.json with the one on origin/main
            if git diff origin/main -- config.json --quiet; then
              echo "No changes in config.json, exiting."
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              echo "Changes detected in config.json."
              echo "changed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "config.json does not exist on main branch, treating as change."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Send update to Discord and push changes
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          # Use the commit message from the extracted step
          commit_msg="${{ steps.extract.outputs.commit_msg }}"

          # Add and commit config.json with the commit message
          git add config.json
          git commit -m "$commit_msg"

          # Capture the current commit hash
          commit_hash=$(git rev-parse HEAD)

          # Construct the commit URL using the GITHUB_REPOSITORY env variable (format: owner/repo)
          commit_url="https://github.com/${GITHUB_REPOSITORY}/commit/${commit_hash}"

          # Push the commit to the main branch
          git push origin HEAD:main

          # Read the config.json content
          config_content=$(cat config.json)

          # Get the current timestamp
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Create the JSON payload for the Discord embed using jq
          payload=$(jq -n \
            --arg title "Config Update" \
            --arg description "New config data available." \
            --arg commit "$commit_msg" \
            --arg commit_url "$commit_url" \
            --arg config "```json\n${config_content}\n```" \
            '{
              embeds: [
                {
                  title: $title,
                  description: $description,
                  url: $commit_url,
                  color: 7506394,
                  timestamp: $timestamp,
                  fields: [
                    {
                      name: "Commit Message",
                      value: $commit,
                      inline: true
                    },
                    {
                      name: "Commit URL",
                      value: $commit_url,
                      inline: true
                    },
                    {
                      name: "Config Data",
                      value: $config,
                      inline: false
                    }
                  ]
                }
              ]
            }')
                        
          # Send the embed payload to Discord
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "$payload" \
              "${{ secrets.DISCORD_WEBHOOK_URL }}"